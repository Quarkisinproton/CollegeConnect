/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset prioritizes secure event management. It allows public read access to event details while restricting write access to authenticated club presidents.
 * @data_structure All events are stored in a top-level `/events` collection. Each event document contains essential event details, including the `clubPresidentId` who created it.
 * @key_security_decisions
 *   - Public Read Access: The `get` and `list` operations on the `/events` collection are open to all users.
 *   - Owner-Only Writes: Only the club president (`clubPresidentId`) associated with an event can create, update, or delete it.
 * @denormalization_for_authorization The `clubPresidentId` field within each event document is crucial for authorization. It enables simple, secure rules that prevent unauthorized modifications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to event documents.
     * @path /events/{eventId}
     * @allow (get, list) Allows any user to read event details.
     * @allow (create) Allows a club president to create a new event if the `clubPresidentId` matches their UID.
     * @allow (update, delete) Allows a club president to modify or remove an event if the `clubPresidentId` matches their UID.
     * @deny (create) Denies creation if the `clubPresidentId` does not match the authenticated user's UID.
     * @deny (update, delete) Denies modification or deletion if the `clubPresidentId` does not match the authenticated user's UID.
     * @principle Enforces document ownership for write operations.
     */
    match /events/{eventId} {
      // Allows any user to read event details
      allow get, list: if true;

      // Only allow club presidents to create an event if the clubPresidentId matches their id
      allow create: if isSignedIn() && request.resource.data.clubPresidentId == request.auth.uid;

      // Only allow the club president to update if the clubPresidentId matches their id and event exists
      allow update: if isSignedIn() && isExistingOwner(resource.data.clubPresidentId);

      // Only allow the club president to delete if the clubPresidentId matches their id and event exists
      allow delete: if isSignedIn() && isExistingOwner(resource.data.clubPresidentId);
    }

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document and the document exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // Helper function to check if the user is the owner
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}