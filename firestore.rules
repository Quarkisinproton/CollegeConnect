/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles and an owner-based model with public reads for events.
 * @data_structure
 *   - /events/{eventId}: Stores event data. Events are publicly readable but only writable by the creator.
 *   - /users/{userId}: Stores user profile data. Each user can only manage their own profile.
 * @key_security_decisions
 *   - Users can only read, create, update, or delete their own user document.
 *   - Events are publicly readable.
 *   - Only the creator of an event can modify or delete it.
 *   - Listing of users is disallowed.
 * @denormalization_for_authorization
 *   - Events store the `createdBy` field to simplify ownership checks during updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to events, but restricts creation, updates, and deletion to the event creator.
     * @path /events/{eventId}
     * @allow (get, list) - Any user can read event data.
     * @allow (create) - An authenticated user can create an event, provided that the 'createdBy' field matches their UID.
     * @allow (update, delete) - The user who created the event can update or delete it.
     * @deny (create) - An unauthenticated user cannot create an event.
     * @deny (update, delete) - A user other than the creator cannot modify or delete the event.
     * @principle Public read access with owner-only writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Restricts access to user documents to the owning user.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - The user with the matching UID can perform these operations on their own document.
     * @deny (get, create, update, delete) - Any other user cannot perform these operations.
     * @deny (list) - Listing all users is not permitted.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get, create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
      allow list: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}