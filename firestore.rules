/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset prioritizes a flexible data structure during prototyping but strictly enforces authorization.
 * All write operations are guarded by identity checks and ownership validation, while read permissions are more permissive to facilitate data exploration.
 * @data_structure The database consists of two top-level collections: `events` and `users`. Each collection stores documents representing events and user profiles, respectively.
 * The `events` collection is intended to be publicly readable, whereas the `users` collection is private and accessible only to the user.
 * @key_security_decisions Events are publicly readable, but only the creator can modify or delete them. Users can only manage their own profile data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to events but restricts modifications to the event creator.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read event details.
     * @allow (create): An authenticated user can create a new event. The 'createdBy' field must match their UID.
     * @allow (update, delete): Only the user who created the event can modify or delete it.
     * @deny  (create): An unauthenticated user cannot create events.
     * @deny  (update, delete): A user cannot modify or delete an event they did not create.
     * @principle Public read access with owner-only writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Restricts user profile access to the user themselves.
     * @path /users/{userId}
     * @allow (get, update, delete): The user can read and modify their own profile.
     * @allow (create): A user can create their profile, but only if the userId matches their auth UID.
     * @deny  (get, update, delete): A user cannot access or modify another user's profile.
     * @principle Enforces user-ownership for all operations.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}