/**
 * @file Firebase Security Rules for Firestore.
 *
 * Core Philosophy:
 * This ruleset prioritizes user-ownership and authenticated access. Users can only manage their own data,
 * while certain data (like events) are publicly readable but require authentication for creation.
 *
 * Data Structure:
 * - /events/{eventId}: Stores event data. Readable by all, but create/update/delete restricted to the event creator.
 * - /users/{userId}: Stores user profile data. Only the user themselves can manage their profile.
 *
 * Key Security Decisions:
 * - Events are publicly listable, but write operations are owner-controlled.
 * - User listing is not permitted for privacy.
 *
 * Denormalization for Authorization:
 * - Events contain a `createdBy` field to simplify ownership checks during updates and deletes. This avoids costly `get()` calls to a separate user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read events, but only the creator can modify them.
     * @path /events/{eventId}
     * @allow (get, list) Anyone can read event data.
     * @allow (create) An authenticated user can create an event with `createdBy` matching their UID.
     * @allow (update, delete) The event creator can update or delete the event.
     * @deny (create) An unauthenticated user cannot create events.
     * @deny (update, delete) A user who did not create the event cannot update or delete it.
     * @principle Public read, owner-only writes.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Restricts user profiles to owner-only access.
     * @path /users/{userId}
     * @allow (create) The user can create their own profile if the UID matches.
     * @allow (get, update, delete) The user can read, update, and delete their own profile.
     * @deny (create) A user cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) Another user cannot read, update, or delete this profile.
     * @deny (list) User listing is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}