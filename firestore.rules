/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset allows public read access to events while restricting write access to authenticated club presidents.
 * @data_structure Events are stored in a top-level /events/{eventId} collection.
 * @key_security_decisions Events are publicly readable, but only the creating club president can modify them. Listing of events is allowed for all users.
 * @denormalization The `clubPresidentId` field on the Event document is critical for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read events, but only allows the club president who created the event to modify or delete it.
     * @path /events/{eventId}
     * @allow (get, list) Any user can read events.
     * @allow (create) An authenticated user can create an event if the `clubPresidentId` matches their `auth.uid`.
     * @allow (update, delete) The user with `auth.uid` matching the event's `clubPresidentId` can modify or delete it, provided the document exists.
     * @deny (create) An unauthenticated user cannot create an event.
     * @deny (update, delete) A user who is not the original creator cannot modify or delete the event.
     * @principle Public read access with owner-only writes, enforced via the `clubPresidentId` field.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.clubPresidentId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.clubPresidentId);
    }

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}