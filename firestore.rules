/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for both events and user profiles.
 * Events are publicly readable, but only the creator can modify them. Users can only manage their own profiles.
 * @data_structure
 * - /events/{eventId}: Stores event data, with a 'createdBy' field indicating the creator.
 * - /users/{userId}: Stores user profile data.
 * @key_security_decisions
 * - Events are publicly listable/readable, but creation, update, and deletion are restricted to the event creator.
 * - Users can only manage their own profile data.
 * - Data type and schema validation are not implemented in this prototype.
 * @denormalization_for_authorization
 * - The 'Event' documents include a 'createdBy' field, enabling direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /events collection.
     * Events are publicly readable, but only authenticated users can create events.
     * Events can only be updated or deleted by the user who created them.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read events.
     * @allow (create): An authenticated user can create an event with `createdBy` set to their UID.
     * @allow (update, delete): Only the user who created the event can update or delete it.
     * @deny (create): An unauthenticated user cannot create events.
     * @deny (update, delete): A user cannot update or delete an event they did not create.
     * @principle Public read with owner-only writes.
     */
    match /events/{eventId} {
      // Allow anyone to read events
      allow get, list: if true;

      // Allow authenticated users to create events, with creator ID validation.
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;

      // Allow the event creator to update and delete events.
      allow update, delete: if isExistingOwner(resource.data.createdBy);

    }

    /**
     * @description Controls access to the /users collection, enforcing user-ownership.
     * A user can only create, read, or update their own document.
     * @path /users/{userId}
     * @allow (get, list): Only the user with the matching UID can read their own profile. Listing is disallowed.
     * @allow (create): A user can create their own profile document with a matching UID.
     * @allow (update, delete): Only the user with the matching UID can update or delete their own profile.
     * @deny (create): A user cannot create a profile with a UID that does not match their own.
     * @deny (get, update, delete): A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Allow a user to read their own profile.
      allow get: if isOwner(userId);

      // Only the user themselves can create their profile.
      allow create: if isOwner(userId);

      // Allow a user to update and delete their own profile, if the profile already exists.
      allow update, delete: if isExistingOwner(userId);

      // Prevent listing of all users.
      allow list: if false;
    }


    // --- HELPER FUNCTIONS ---

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the request is made by the owner (uid matches the resource ID).
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Check if the existing document's owner matches the user.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}