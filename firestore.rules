/**
 * @fileoverview Firestore Security Rules for the campus events app.
 *
 * Core Philosophy:
 * This ruleset prioritizes user-owned data with public read access for events.
 * Users can only manage their own profile data. Events are publicly visible but
 * only created, updated, or deleted by their creator.
 *
 * Data Structure:
 * - /events/{eventId}: Stores event data.
 * - /users/{userId}: Stores user profile information.
 *
 * Key Security Decisions:
 * - Events are publicly readable to allow for open discovery.
 * - Users can only manage (create, update, delete) their own user profile.
 * - Events can only be created by authenticated users, and only updated/deleted by the user who created them.
 *
 * Denormalization for Authorization:
 * - Event documents denormalize the creator's UID in the `createdBy` field.
 *   This allows event rules to quickly check ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public reading of events, but restricts creation, updates, and deletes to the event creator.
     * @path /events/{eventId}
     * @allow (list, get): Any user can view events.
     * @allow (create): Authenticated user can create an event with `createdBy` matching their UID.
     * @allow (update, delete): Only the user who created the event (createdBy) can modify or delete it.
     * @deny (create): Unauthenticated users cannot create events.
     * @deny (update, delete): A user cannot modify or delete an event they didn't create.
     * @principle Allows public reads, enforces creator-only writes for events.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Allows a user to manage their own profile data.
     * @path /users/{userId}
     * @allow (get, update, delete): User can access their own profile data (userId matches auth.uid).
     * @allow (create): User can create their own profile if userId matches auth.uid.
     * @deny (get, create, update, delete): User cannot access or modify another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}