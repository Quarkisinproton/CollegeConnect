/**
 * @file Firebase Security Rules for Firestore.
 *
 * @core_philosophy This ruleset prioritizes security and data ownership. It enforces a strict model where users primarily have access to their own data, with limited public read access for certain collections.
 *
 * @data_structure
 * - /events/{eventId}: Stores event data. Publicly readable. Write access restricted to the event creator.
 * - /users/{userId}: Stores user profile data. Read/write access restricted to the user themselves.
 *
 * @key_security_decisions
 * - Listing of users is disallowed to protect user privacy.
 * - Event creation requires authentication.
 * - Only the owner can update/delete an event.
 * - User documents can only be created by the corresponding user.
 *
 * @denormalization_for_authorization The `Event` entity includes `createdBy`, enabling ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read event data, but only allows authenticated users to create events.
     * Events can only be updated or deleted by the user who created them.
     * @path /events/{eventId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn() && request.resource.data.createdBy == request.auth.uid
     * @allow (update, delete): if isSignedIn() && resource.data.createdBy == request.auth.uid
     * @deny (create): if !isSignedIn()
     * @deny (update, delete): if !isSignedIn() || resource.data.createdBy != request.auth.uid
     * @principle Public read, owner-only write with authenticated creation.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.createdBy);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (get, create, update, delete): if isOwner(userId)
     * @deny (get, create, update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}