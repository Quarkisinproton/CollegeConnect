/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset prioritizes a balance between open access for public content (events) and strict ownership for user-specific data.
 * @data_structure
 *   - /events/{eventId}: Stores publicly accessible event data.
 *   - /users/{userId}: Stores private user profile data.
 * @key_security_decisions
 *   - Events are publicly readable (get, list) to facilitate discovery.
 *   - Event creation is restricted to authenticated users (isSignedIn()).
 *   - Event updates and deletes are restricted to the event creator (isOwner()).
 *   - Users can only manage their own profile data in /users/{userId} (isOwner()).
 * @denormalization_for_authorization
 *   - The Event entity contains a `createdBy` field, which stores the UID of the user who created the event. This is used to enforce owner-only write access.
 * @structural_segregation
 *   - Public event data is stored in the top-level `/events` collection, while private user data is stored under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to all events, but restricts creation, update, and deletion to the event creator.
     * @path /events/{eventId}
     * @allow (get, list) - Any user can read event data.
     * @allow (create) - Authenticated user can create an event. The `createdBy` field must match the user's UID.
     * @allow (update, delete) - Only the user who created the event (createdBy) can update or delete it.
     * @deny (create) - An unauthenticated user cannot create an event.
     * @deny (update, delete) - A user cannot update or delete an event they did not create.
     * @principle Public read with owner-only writes. Enforces document ownership for writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Allows a user to manage their own profile data only.
     * @path /users/{userId}
     * @allow (get, update, delete) - Only the user with the matching UID can read, update, or delete their profile.
     * @allow (create) - Allows user to create their own profile document with matching UID.
     * @deny (get, update, delete) - A user cannot access or modify another user's profile.
     * @deny (create) - A user cannot create a profile document with a UID that does not match their own.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}