/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset prioritizes a balance between open access for public content (events) and strict ownership for user-specific data.
 * @data_structure
 *   - /events/{eventId}: Stores event data. Intended to be publicly readable but with restricted write access.
 *   - /users/{userId}: Stores user profile data. Access is restricted to the owning user.
 * @key_security_decisions
 *   - Events are publicly listable and readable to promote discovery.
 *   - Event creation requires authentication.
 *   - Event updates and deletes are restricted to the creator.
 *   - Users can only manage their own profile data.
 *   - User listing is disallowed for privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read the list of events. Only the event creator can modify/delete.
     * @path /events/{eventId}
     * @allow (list) - Any user can list events.
     * @allow (get) - Any user can get events.
     * @allow (create) - Authenticated user can create an event.
     * @allow (update) - The user who created the event can update it.
     * @allow (delete) - The user who created the event can delete it.
     *
     * @deny (create) - Unauthenticated user cannot create events.
     * @deny (update) - A user who did not create the event cannot update it.
     * @deny (delete) - A user who did not create the event cannot delete it.
     * @principle Allows public reads, enforces document ownership for writes.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.createdBy);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Allows a user to only manage their own profile.
     * @path /users/{userId}
     * @allow (get) - The user can get their own profile.
     * @allow (create) - The user can create their own profile.
     * @allow (update) - The user can update their own profile.
     * @allow (delete) - The user can delete their own profile.
     *
     * @deny (get) - A user cannot get another user's profile.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (update) - A user cannot update another user's profile.
     * @deny (delete) - A user cannot delete another user's profile.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == request.resource.data.uid;
      allow delete: if isOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId && resource != null;
    }
  }
}