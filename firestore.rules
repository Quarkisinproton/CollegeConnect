/**
 * @file Firestore Security Rules
 * @description This ruleset implements a public-read, owner-write security model for events.
 *
 * Core Philosophy:
 *   Events are publicly readable, enabling wide access to event information.
 *   Write access (create, update, delete) is restricted to authenticated users,
 *   with ownership enforced to ensure users can only manage events they create.
 *
 * Data Structure:
 *   - /events/{eventId}: Stores event details.
 *     - Each event document must have a `clubPresidentId` field indicating the creator.
 *
 * Key Security Decisions:
 *   - Public read access for all events.
 *   - Write access restricted to authenticated users only.
 *   - Owner-only access for updates and deletes, based on the `clubPresidentId` field.
 *   - Relational integrity is enforced on event creation, ensuring the `clubPresidentId` matches the authenticated user.
 *
 * Denormalization for Authorization:
 *   - The `clubPresidentId` field is crucial for authorization. It must exist within each event document to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to the 'events' collection. Allows public read access but restricts write access to authenticated users who own the event.
     * @path /events/{eventId}
     * @allow (get, list): Any user can read event data.
     * @allow (create): Authenticated users can create events, provided they set the 'clubPresidentId' to their own UID.
     * @allow (update, delete): Only the owner (clubPresidentId) of an event can modify or delete it.
     * @deny (create): Unauthenticated users cannot create events.
     * @deny (update, delete): Users cannot modify or delete events they don't own.
     * @principle Enforces document ownership for writes while allowing public reads. Validates creatorId on create.
     */
    match /events/{eventId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.clubPresidentId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.clubPresidentId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.clubPresidentId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param userId The user ID to compare against the request's auth UID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param userId The user ID to compare against the document's creatorId.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}